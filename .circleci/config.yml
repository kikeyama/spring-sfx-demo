# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2.1
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      # Slack
      - slack/notify:
          channel: C015JGRS4VA
          color: '#42e2f4'
          mentions: 'U23ACBMB5,U7CCVF98S'
          message: ビルド開始するで
          webhook: ${SLACK_WEBHOOK}

      # Splunk
      - slack/notify:
          message: ビルド開始するで
          webhook: ${SPLUNK_WEBHOOK}

      - webhook/notify:
          endpoint: ${SPLUNK_WEBHOOK}

      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: ./gradlew build

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      # Slack
      - slack/status:
          #fail_only: true
          mentions: 'U23ACBMB5,U7CCVF98S'
          only_for_branches: master
          webhook: ${SLACK_WEBHOOK}

      # Splunk
      - webhook/notify:
          endpoint: ${SPLUNK_WEBHOOK}
      - slack/status:
          only_for_branches: master
          webhook: ${SPLUNK_WEBHOOK}

orbs:
  slack: circleci/slack@3.4.2
  webhook: eddiewebb/webhook@volatile
  signalfx_orb:
    executors:
      signalfx_event_executor:
        parameters:
          version:
            type: string
            default: "2.4"
        docker:
          - image: circleci/ruby:<<parameters.version>>
    commands:
      signalfx_event_command:
        description: Send events to SignalFx
        parameters:
          signalfx_access_token:
            default: ${SIGNALFX_ACCESS_TOKEN}
            description: Enter SignalFx access token or set env var SIGNALFX_ACCESS_TOKEN
            type: string
          signalfx_realm:
            default: ${SIGNALFX_REALM}
            description: Enter SignalFx realm (us0, us1, eu0, etc) or set env var SIGNALFX_REALM
            type: string
          service:
            default: ${CIRCLE_PROJECT_REPONAME}
            description: Service name used in SignalFx
            type: string
          event_type:
            default: ${CIRCLE_JOB}
            description: Enter event name (e.g. deploy | build | rollback)
            type: string
        steps:
          - run:
              when: on_success
              name: set_status_success
              command: |
                echo 'export BUILD_STATUS="success"' >> $BASH_ENV
          - run:
              when: on_fail
              name: set_status_failure
              command: |
                echo 'export BUILD_STATUS="failure"' >> $BASH_ENV
          - run: 
              command: |
                curl -X POST -H "Content-Type: application/json" \
                -H "X-SF-Token: <<parameters.signalfx_access_token>>" --data \
                "[
                  {
                    \"eventType\": \"CircleCI <<parameters.event_type>>\",
                    \"dimensions\": {
                      \"service\": \"<<parameters.service>>\"
                    },
                    \"properties\": {
                      \"vcs_revision\": \"$CIRCLE_SHA1\",
                      \"build_num\": \"$CIRCLE_BUILD_NUM\",
                      \"status\": \"$BUILD_STATUS\",
                      \"build_url\": \"$CIRCLE_BUILD_URL\",
                      \"user\": \"$CIRCLE_USERNAME\"
                    },
                    \"category\": \"USER_DEFINED\",
                    \"timestamp\": $((`date +%s` * 1000))
                  }
                ]" \
                https://ingest.<<parameters.signalfx_realm>>.signalfx.com/v2/event
              name: send_signalfx_event
    jobs:
      signalfx_event_job:
        parameters:
          event_type:
            default: ${CIRCLE_JOB}
            description: Enter event name (e.g. deploy | build | rollback)
            type: string
        executor: signalfx_event_executor
        steps:
          - signalfx_event_command

workflows:
  main:
    jobs:
      - slack/approval-notification:
          name: slack_approval_notification
          mentions: U23ACBMB5
          message: Pending approval
          webhook: ${SLACK_WEBHOOK}
      - hold:
          type: approval
      - build:
          requires:
            - hold
      - signalfx_orb/signalfx_event_job:
          name: signalfx_event
          event_type: deploy
          requires:
            - hold
            - build
